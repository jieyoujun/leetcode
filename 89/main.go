package graycode

func grayCode(n int) []int {
	// 规律1
	// n = 0, [0]
	// n = 1, [0,1] <= [1] = [0]->[0]+2^0
	// n = 2, [0,1,3,2] <= [3,2] = [0,1]->[1,0]+2^1
	// n = 3, [0,1,3,2,6,7,5,4] <= [6,7,5,4] = [0,1,3,2]->[2,3,1,0]+2^2
	// f(n) = append(f(n-1), reverse(f(n-1))+2^(n-1))

	// res, head := []int{0}, 1
	// for i := 0; i < n; i++ {
	// 	for j := len(res) - 1; j >= 0; j-- {
	// 		res = append(res, res[j]+head)
	// 	}
	// 	head <<= 1 // 2^(n-1)
	// }
	// return res

	// 规律2: G(i) = i ^ (i/2)
	// 如 n = 3:
	// G(0) = 000,
	// G(1) = 1 ^ 0 = 001 ^ 000 = 001
	// G(2) = 2 ^ 1 = 010 ^ 001 = 011
	// G(3) = 3 ^ 1 = 011 ^ 001 = 010
	// G(4) = 4 ^ 2 = 100 ^ 010 = 110
	// G(5) = 5 ^ 2 = 101 ^ 010 = 111
	// G(6) = 6 ^ 3 = 110 ^ 011 = 101
	// G(7) = 7 ^ 3 = 111 ^ 011 = 100
	var res []int
	for i := 0; i < 1<<n; i++ {
		res = append(res, i^i>>1)
	}
	return res
}
