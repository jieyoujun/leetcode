package addtwonumbers

import (
	"reflect"
	"testing"
)

func TestAddTwoNumbers(t *testing.T) {
	type testCase struct {
		l1, l2, want *ListNode
	}
	testGroup := map[string]testCase{
		"case1": testCase{
			l1: &ListNode{Val: 2,
				Next: &ListNode{Val: 4,
					Next: &ListNode{Val: 3,
						Next: nil,
					},
				},
			},
			l2: &ListNode{Val: 5,
				Next: &ListNode{Val: 6,
					Next: &ListNode{Val: 4,
						Next: nil,
					},
				},
			},
			want: &ListNode{Val: 7,
				Next: &ListNode{Val: 0,
					Next: &ListNode{Val: 8,
						Next: nil,
					},
				},
			},
		},
		"case2": testCase{
			l1: &ListNode{Val: 0,
				Next: nil,
			},
			l2: &ListNode{Val: 0,
				Next: nil,
			},
			want: &ListNode{Val: 0,
				Next: nil,
			},
		},
		// [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
		"case3": testCase{
			l1: &ListNode{Val: 1,
				Next: &ListNode{Val: 0,
					Next: &ListNode{Val: 0,
						Next: &ListNode{Val: 0,
							Next: &ListNode{Val: 0,
								Next: &ListNode{Val: 0,
									Next: &ListNode{Val: 0,
										Next: &ListNode{Val: 0,
											Next: &ListNode{Val: 0,
												Next: &ListNode{Val: 0,
													Next: &ListNode{Val: 0,
														Next: &ListNode{Val: 0,
															Next: &ListNode{Val: 0,
																Next: &ListNode{Val: 0,
																	Next: &ListNode{Val: 0,
																		Next: &ListNode{Val: 0,
																			Next: &ListNode{Val: 0,
																				Next: &ListNode{Val: 0,
																					Next: &ListNode{Val: 0,
																						Next: &ListNode{Val: 0,
																							Next: &ListNode{Val: 0,
																								Next: &ListNode{Val: 0,
																									Next: &ListNode{Val: 0,
																										Next: &ListNode{Val: 0,
																											Next: &ListNode{Val: 0,
																												Next: &ListNode{Val: 0,
																													Next: &ListNode{Val: 0,
																														Next: &ListNode{Val: 0,
																															Next: &ListNode{Val: 0,
																																Next: &ListNode{Val: 0,
																																	Next: &ListNode{Val: 1,
																																		Next: nil,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			l2: &ListNode{Val: 5,
				Next: &ListNode{Val: 6,
					Next: &ListNode{Val: 4,
						Next: nil,
					},
				},
			},
			want: &ListNode{Val: 6,
				Next: &ListNode{Val: 6,
					Next: &ListNode{Val: 4,
						Next: &ListNode{Val: 0,
							Next: &ListNode{Val: 0,
								Next: &ListNode{Val: 0,
									Next: &ListNode{Val: 0,
										Next: &ListNode{Val: 0,
											Next: &ListNode{Val: 0,
												Next: &ListNode{Val: 0,
													Next: &ListNode{Val: 0,
														Next: &ListNode{Val: 0,
															Next: &ListNode{Val: 0,
																Next: &ListNode{Val: 0,
																	Next: &ListNode{Val: 0,
																		Next: &ListNode{Val: 0,
																			Next: &ListNode{Val: 0,
																				Next: &ListNode{Val: 0,
																					Next: &ListNode{Val: 0,
																						Next: &ListNode{Val: 0,
																							Next: &ListNode{Val: 0,
																								Next: &ListNode{Val: 0,
																									Next: &ListNode{Val: 0,
																										Next: &ListNode{Val: 0,
																											Next: &ListNode{Val: 0,
																												Next: &ListNode{Val: 0,
																													Next: &ListNode{Val: 0,
																														Next: &ListNode{Val: 0,
																															Next: &ListNode{Val: 0,
																																Next: &ListNode{Val: 0,
																																	Next: &ListNode{Val: 1,
																																		Next: nil,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	}
	for caseName, tC := range testGroup {
		t.Run(caseName, func(t *testing.T) {
			got := AddTwoNumbers(tC.l1, tC.l2)
			if !reflect.DeepEqual(tC.want, got) {
				t.Fatalf("want:%#v, got:%#v\n", tC.want, got)
			}
		})
	}
}
