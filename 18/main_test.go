package foursum

import (
	"reflect"
	"testing"
)

func TestFourSum(t *testing.T) {
	type testCase struct {
		nums   []int
		target int
		want   [][]int
	}
	testGroup := map[string]testCase{
		"case1": testCase{[]int{1, 0, -1, 0, -2, 2}, 0, [][]int{
			{-1, 0, 0, 1},
			{-2, -1, 1, 2},
			{-2, 0, 0, 2},
		}},
		"case2": testCase{[]int{-3, -1, 0, 2, 4, 5}, 0, [][]int{
			{-3, -1, 0, 4},
		}},
		"case3": testCase{[]int{-3, -1, 0, 2, 4, 5}, 2, [][]int{
			{-3, -1, 2, 4},
		}},
		"case4": testCase{[]int{-3, -2, -1, 0, 0, 1, 2, 3}, 0, [][]int{
			{-3, -2, 2, 3},
			{-3, -1, 1, 3},
			{-3, 0, 0, 3},
			{-3, 0, 1, 2},
			{-2, -1, 0, 3},
			{-2, -1, 1, 2},
			{-2, 0, 0, 2},
			{-1, 0, 0, 1},
		}},
		"case5": testCase{[]int{-4, -3, -2, -1, 0, 0, 1, 2, 3, 4}, 0, [][]int{
			{-4, -3, 3, 4},
			{-4, -2, 2, 4},
			{-4, -1, 1, 4},
			{-4, -1, 2, 3},
			{-4, 0, 0, 4},
			{-4, 0, 1, 3},
			{-3, -2, 1, 4},
			{-3, -2, 2, 3},
			{-3, -1, 0, 4},
			{-3, -1, 1, 3},
			{-3, 0, 0, 3},
			{-3, 0, 1, 2},
			{-2, -1, 0, 3},
			{-2, -1, 1, 2},
			{-2, 0, 0, 2},
			{-1, 0, 0, 1},
		}},
		"case6": testCase{[]int{-5, -4, -3, -2, -1, 0, 0, 1, 2, 3, 4, 5}, 0, [][]int{
			{-5, -4, 4, 5},
			{-5, -3, 3, 5},
			{-5, -2, 2, 5},
			{-5, -2, 3, 4},
			{-5, -1, 1, 5},
			{-5, -1, 2, 4},
			{-5, 0, 0, 5},
			{-5, 0, 1, 4},
			{-5, 0, 2, 3},
			{-4, -3, 2, 5},
			{-4, -3, 3, 4},
			{-4, -2, 1, 5},
			{-4, -2, 2, 4},
			{-4, -1, 0, 5},
			{-4, -1, 1, 4},
			{-4, -1, 2, 3},
			{-4, 0, 0, 4},
			{-4, 0, 1, 3},
			{-3, -2, 0, 5},
			{-3, -2, 1, 4},
			{-3, -2, 2, 3},
			{-3, -1, 0, 4},
			{-3, -1, 1, 3},
			{-3, 0, 0, 3},
			{-3, 0, 1, 2},
			{-2, -1, 0, 3},
			{-2, -1, 1, 2},
			{-2, 0, 0, 2},
			{-1, 0, 0, 1},
		}},
	}
	for caseName, tC := range testGroup {
		t.Run(caseName, func(t *testing.T) {
			got := FourSum(tC.nums, tC.target)
			if !reflect.DeepEqual(tC.want, got) {
				t.Fatalf("want: %#v, got: %#v\n", tC.want, got)
			}
		})
	}
}
